// <auto-generated />
using System;
using Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(DBData))]
    [Migration("20230705172356_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.8");

            modelBuilder.Entity("Domain.Entity.FailedMessage", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("MessageFiled")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("MessageID")
                        .HasColumnType("INTEGER");

                    b.HasKey("ID");

                    b.HasIndex("MessageID");

                    b.ToTable("FailedMessages");

                    b.HasAnnotation("Relational:JsonPropertyName", "failed");
                });

            modelBuilder.Entity("Domain.Entity.Message", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "body");

                    b.Property<DateTime>("DateSend")
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "date");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "subject");

                    b.HasKey("ID");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("Domain.Entity.MessageResult", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("MessageID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("MessageID");

                    b.ToTable("MessageResults");

                    b.HasAnnotation("Relational:JsonPropertyName", "result");
                });

            modelBuilder.Entity("Domain.Entity.Recipient", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("MessageID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Recipients")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.HasIndex("MessageID");

                    b.ToTable("Recipients");

                    b.HasAnnotation("Relational:JsonPropertyName", "recipients");
                });

            modelBuilder.Entity("Domain.Entity.FailedMessage", b =>
                {
                    b.HasOne("Domain.Entity.Message", "Message")
                        .WithMany("Failed")
                        .HasForeignKey("MessageID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Message");
                });

            modelBuilder.Entity("Domain.Entity.MessageResult", b =>
                {
                    b.HasOne("Domain.Entity.Message", "Message")
                        .WithMany("Result")
                        .HasForeignKey("MessageID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Message");
                });

            modelBuilder.Entity("Domain.Entity.Recipient", b =>
                {
                    b.HasOne("Domain.Entity.Message", "Message")
                        .WithMany("Recipients")
                        .HasForeignKey("MessageID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Message");
                });

            modelBuilder.Entity("Domain.Entity.Message", b =>
                {
                    b.Navigation("Failed");

                    b.Navigation("Recipients");

                    b.Navigation("Result");
                });
#pragma warning restore 612, 618
        }
    }
}
